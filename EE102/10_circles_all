// Center-pivot Irrigation Detector.

Map.setCenter(-106.06, 37.71, 12);
var palette = [
  'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
  '74A901', '66A000', '529400', '3E8601', '207401', '056201',
  '004C00', '023B01', '012E01', '011D01', '011301'];

// Just display the image with the palette.
var image = ee.Image('LT5_L1T_8DAY_EVI/20110618');
var threshold = image.gt(0.3)    // Pick a threshold for "active" vegetation,
Map.addLayer(image, {min:0, max: 1, palette: palette}, 'Landsat EVI');
Map.addLayer(threshold, null, "Threshold", false)

///////////// Version 1 ///////////////
// Find the difference between convolution with circles and squares.
// This difference will be strongest at the center of circles in the image.
var farmSize = 500;  // Radius of a farm, in meters.
var circleKernel = ee.Kernel.circle(farmSize, 'meters');
var squareKernel = ee.Kernel.square(farmSize, 'meters');

var circles = threshold.convolve(circleKernel);
Map.addLayer(circles, {}, "Circles")
var squares = threshold.convolve(squareKernel);
Map.addLayer(squares, {}, "Squares")
var diff = circles.subtract(squares)
Map.addLayer(diff, {min:0.1, max:0.2}, "V1 - Diff")
diff = diff.where(diff.lt(0.15), 0)

// Select pixels which are their own local maximum.
var max = diff.focal_max({radius: farmSize * 1.8, units: 'meters'});
var local = diff.eq(max).and(max.neq(0))

// Color just the found circles.
local = local.focal_max({kernel: circleKernel})
local = local.updateMask(local)
Map.addLayer(local, {palette: "yellow" }, "V1 - Results")

/////// Version 2 ///////////
// Detect the edges of the features.  Discard the edges with lower intensity.
var canny = ee.Algorithms.CannyEdgeDetector(image, 0).gt(0.3)
Map.addLayer(canny, {}, "V2 - Edges")

// Create a "ring" kernel from two circular kernels.
var inner = ee.Kernel.circle(farmSize - 20, 'meters', false, -1);
var outer = ee.Kernel.circle(farmSize + 20, 'meters', false, 1);
var ring = outer.add(inner, true);

// Highlight the places where the edges best match the ring kernel.
var centers = canny.convolve(ring).gt(0.49)

// Color the found circles.
centers = centers.focal_max({kernel: ring})
centers = centers.updateMask(centers)
Map.addLayer(centers, {palette: 'aqua'}, 'V2 - Results');

///////////// Version 3 ///////////////
// Find points which have a distance between min and max and which are their own local maximum.
// This will be the center of each "blob".
var sqPixels = threshold.not().fastDistanceTransform()            // Distance in pixels^2.
var distance = sqPixels.sqrt().multiply(ee.Image.pixelArea().sqrt())  // Convert to meters.
var localMax = distance.focal_max({radius: 300, units: 'meters'})
var blobs = distance.gt(360).and(distance.lt(425)).and(distance.eq(localMax))
var result = distance.updateMask(blobs)

Map.addLayer(distance.updateMask(distance), {min:0, max:400}, "V3 - Distance")
Map.addLayer(buffer(result), {palette: "red"}, "V3 - Results")

// Buffer each point in an image by its value taken as a distance in meters.
function buffer(distance) {
  distance = distance.divide(ee.Image.pixelArea().sqrt()) // Convert to pixels.
  distance = distance.multiply(distance).int()            // Squared because rsed wants d^2.
  var result = distance.rsedTransform()
  return result.updateMask(result)
}
