// Center-pivot Irrigation Detector.
// Edges detection and convoloution with ring kernel.

Map.setCenter(-106.06, 37.71, 12);
var palette = [
  'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
  '74A901', '66A000', '529400', '3E8601', '207401', '056201',
  '004C00', '023B01', '012E01', '011D01', '011301'];

// Just display the image with the palette.
var image = ee.Image('LT5_L1T_8DAY_EVI/20110618');
var threshold = image.gt(0.3)    // Pick a threshold for "active" vegetation,
Map.addLayer(image, {min:0, max: 1, palette: palette}, 'Landsat EVI');
Map.addLayer(threshold, null, "Threshold", false)
var farmSize = 500

// Detect the edges of the features.  Discard the edges with lower intensity.
var canny = ee.Algorithms.CannyEdgeDetector(image, 0).gt(0.3)
Map.addLayer(canny, {}, "V2 - Edges")

// Create a "ring" kernel from two circular kernels.
var inner = ee.Kernel.circle(farmSize - 20, 'meters', false, -1);
var outer = ee.Kernel.circle(farmSize + 20, 'meters', false, 1);
var ring = outer.add(inner, true);

// Highlight the places where the edges best match the ring kernel.
var centers = canny.convolve(ring).gt(0.49)

// Color the found circles.
centers = centers.focal_max({kernel: ring})
centers = centers.updateMask(centers)
Map.addLayer(centers, {palette: 'aqua'}, 'V2 - Results');